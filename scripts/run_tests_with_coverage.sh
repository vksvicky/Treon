#!/bin/bash

# Treon C++ Test Runner with Coverage Report
# This script runs all tests and generates coverage reports

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BUILD_DIR="cpp/build"
COVERAGE_DIR="coverage"
LCOV_INFO_FILE="${COVERAGE_DIR}/coverage.info"
LCOV_EXCLUDE_PATTERNS="*/tests/* */Treon_autogen/* */treon_core_autogen/*"

echo -e "${BLUE}üß™ Treon C++ Test Runner with Coverage${NC}"
echo "================================================"

# Check if we're in the right directory
if [ ! -f "cpp/CMakeLists.txt" ]; then
    echo -e "${RED}‚ùå Error: Please run this script from the project root directory${NC}"
    exit 1
fi

# Check for gcov
if command -v gcov >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ gcov found - coverage reporting enabled${NC}"
    COVERAGE_ENABLED=true
else
    echo -e "${YELLOW}‚ö†Ô∏è gcov not found - coverage reporting disabled${NC}"
    COVERAGE_ENABLED=false
fi

# Clean previous build and coverage data
echo -e "${BLUE}üßπ Cleaning previous build and coverage data...${NC}"
rm -rf "${BUILD_DIR}"
rm -rf "${COVERAGE_DIR}"
mkdir -p "${COVERAGE_DIR}"

# Configure and build with coverage flags if enabled
echo -e "${BLUE}üî® Building with coverage flags...${NC}"
if [ "$COVERAGE_ENABLED" = true ]; then
    cmake -S cpp -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage"
else
    cmake -S cpp -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=Debug
fi

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå CMake configuration failed!${NC}"
    exit 1
fi

cmake --build "${BUILD_DIR}" -j "$(sysctl -n hw.ncpu)"
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Build failed!${NC}"
    exit 1
fi

echo -e "${BLUE}üß™ Running tests...${NC}"
echo "================================================"

# Check if tests are enabled
if [ -d "${BUILD_DIR}/tests" ] && [ -f "cpp/tests/CMakeLists.txt" ]; then
    # Run tests with verbose output
    if ctest --test-dir "${BUILD_DIR}" -C Debug --output-on-failure; then
        echo -e "${GREEN}‚úÖ All tests passed!${NC}"
        TEST_RESULT=0
    else
        echo -e "${RED}‚ùå Some tests failed!${NC}"
        TEST_RESULT=1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Tests are currently disabled in CMakeLists.txt${NC}"
    echo -e "${YELLOW}   To enable tests, uncomment the test section in cpp/CMakeLists.txt${NC}"
    TEST_RESULT=0
fi

echo "================================================"

# Generate coverage report if enabled
if [ "$COVERAGE_ENABLED" = true ]; then
    echo -e "${BLUE}üìä Generating coverage report...${NC}"
    echo -e "${BLUE}üìà Collecting coverage data...${NC}"
    
    # Find all .gcda files and generate .gcov files
    find "${BUILD_DIR}" -name "*.gcda" -exec gcov {} +
    
    # Generate lcov info file
    lcov --capture --directory "${BUILD_DIR}" --output-file "${LCOV_INFO_FILE}"
    
    # Exclude test files and autogenerated MOC files from coverage report
    for pattern in $LCOV_EXCLUDE_PATTERNS; do
        lcov --remove "${LCOV_INFO_FILE}" "${pattern}" --output-file "${LCOV_INFO_FILE}"
    done
    
    # Generate HTML report
    genhtml "${LCOV_INFO_FILE}" --output-directory "${COVERAGE_DIR}/html"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Failed to generate HTML coverage report!${NC}"
    else
        echo -e "${GREEN}‚úÖ HTML coverage report generated: ${COVERAGE_DIR}/html/index.html${NC}"
    fi
    
    # Generate a summary markdown file
    echo "### Code Coverage Summary" > "${COVERAGE_DIR}/coverage_summary.md"
    lcov --list "${LCOV_INFO_FILE}" >> "${COVERAGE_DIR}/coverage_summary.md"
    echo -e "${GREEN}‚úÖ Coverage summary generated: ${COVERAGE_DIR}/coverage_summary.md${NC}"
    
    echo -e "${BLUE}üóëÔ∏è Cleaning up temporary coverage files...${NC}"
    find "${BUILD_DIR}" -name "*.gcda" -delete
    find "${BUILD_DIR}" -name "*.gcno" -delete
    find "${BUILD_DIR}" -name "*.gcov" -delete
fi

exit $TEST_RESULT
